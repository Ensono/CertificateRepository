// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CertificateRepository.IntegrationTests.Features.CertificateRepository
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Certificate Repository Find By Thumbprint")]
    public partial class CertificateRepositoryFindByThumbprintFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindByThumbprint.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Certificate Repository Find By Thumbprint", @"Must throw exception when a thumbprint starts or ends with a left-to-right-mark (U+200E)
Must throw exception when a thumbprint starts or ends wtih a space
Must throw exception when a thumbprint contains an invalid character
Must throw exception when a thumbprint is of the wrong length", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint starts with a left-to-right-mark")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenThumbprintStartsWithALeft_To_Right_Mark()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint starts with a left-to-right-mark", new string[] {
                        "CleanupCertificatesOnError"});
#line 8
  this.ScenarioSetup(scenarioInfo);
#line 9
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
   testRunner.And("I call FindByThumbprint with thumbprint \'EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92C" +
                    "\' prefixed with a \'left-to-right-mark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
   testRunner.And("it will have 2 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint ends with a left-to-right-mark")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenThumbprintEndsWithALeft_To_Right_Mark()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint ends with a left-to-right-mark", new string[] {
                        "CleanupCertificatesOnError"});
#line 23
  this.ScenarioSetup(scenarioInfo);
#line 24
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
   testRunner.And("I call FindByThumbprint with thumbprint \'EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92C" +
                    "\' sufixed with a \'left-to-right-mark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
   testRunner.And("it will have 2 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint starts with a space")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenThumbprintStartsWithASpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint starts with a space", new string[] {
                        "CleanupCertificatesOnError"});
#line 38
  this.ScenarioSetup(scenarioInfo);
#line 39
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
   testRunner.And("I call FindByThumbprint with thumbprint \'EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92C" +
                    "\' prefixed with a \'space\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint ends with a space")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenThumbprintEndsWithASpace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint ends with a space", new string[] {
                        "CleanupCertificatesOnError"});
#line 53
  this.ScenarioSetup(scenarioInfo);
#line 54
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
   testRunner.And("I call FindByThumbprint with thumbprint \'EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92C" +
                    "\' sufixed with a \'space\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint contains an invalid character")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F3 7B67CCE6F539071AD13A4BFA92", null)]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CCE6F539071XAD13A4BFA92", null)]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CCE6F539071\'AD13A4BFA92", null)]
        [NUnit.Framework.TestCaseAttribute("EF-FF7FD55F1F37B67CCE6F539071AD13A4BFA92", null)]
        public virtual void ThrowExeptionWhenThumbprintContainsAnInvalidCharacter(string thumbprint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanupCertificatesOnError"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint contains an invalid character", @__tags);
#line 68
  this.ScenarioSetup(scenarioInfo);
#line 69
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
   testRunner.And(string.Format("I call FindByThumbprint with thumbprint \'{0}\' from the following examples", thumbprint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when thumbprint is of an incorrect length")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CCE6F539071AD13A4BFA9C", null)]
        [NUnit.Framework.TestCaseAttribute("E", null)]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CC", null)]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92CA", null)]
        [NUnit.Framework.TestCaseAttribute("EFFF7FD55F1F37B67CCE6F539071AD13A4BFA92CE6F539071AD13A4BFA92C", null)]
        public virtual void ThrowExeptionWhenThumbprintIsOfAnIncorrectLength(string thumbprint, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CleanupCertificatesOnError"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when thumbprint is of an incorrect length", @__tags);
#line 89
  this.ScenarioSetup(scenarioInfo);
#line 90
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
   testRunner.And(string.Format("I call FindByThumbprint with thumbprint \'{0}\' from the following examples", thumbprint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
