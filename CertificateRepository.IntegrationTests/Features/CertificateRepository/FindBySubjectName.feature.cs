// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CertificateRepository.IntegrationTests.Features.CertificateRepository
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FindBySubjectName")]
    public partial class FindBySubjectNameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindBySubjectName.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindBySubjectName", "Must throw exception when a subject name starts or ends with a left-to-right-mark" +
                    " (U+200E)\nMust write debug message when using FindBySubject name detailing pitfa" +
                    "lls\nMust write debug message when subject name containers unicode characters", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when subject name starts with a left-to-right-mark")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenSubjectNameStartsWithALeft_To_Right_Mark()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when subject name starts with a left-to-right-mark", new string[] {
                        "CleanupCertificatesOnError"});
#line 7
  this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
   testRunner.And("I call FindBySubjectName with subject name \'Sample\' prefixed with a \'left-to-righ" +
                    "t-mark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throw exeption when subject name ends with a left-to-right-mark")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void ThrowExeptionWhenSubjectNameEndsWithALeft_To_Right_Mark()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throw exeption when subject name ends with a left-to-right-mark", new string[] {
                        "CleanupCertificatesOnError"});
#line 22
  this.ScenarioSetup(scenarioInfo);
#line 23
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
   testRunner.And("I call FindBySubjectName with subject name \'Sample\' suffixed with a \'left-to-righ" +
                    "t-mark\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then("an exception will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
   testRunner.And("it will be of type \'CompositeArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
   testRunner.And("it will have 1 inner exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
   testRunner.And("inner exception number 1 will be of type \'ArgumentException\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
   testRunner.And("inner exception number 1 will have a \'ParamName\' set to \'thumbprint\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Log debug message when calling FindBySubjectName")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void LogDebugMessageWhenCallingFindBySubjectName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log debug message when calling FindBySubjectName", new string[] {
                        "CleanupCertificatesOnError"});
#line 37
  this.ScenarioSetup(scenarioInfo);
#line 38
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
   testRunner.And("a trace listener has been attached to the executing process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
   testRunner.And("I call FindBySubjectName with subject name \'Sample\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.Then("a debug message will be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Log debug message when calling FindBySubjectName containing unicode characters")]
        [NUnit.Framework.CategoryAttribute("CleanupCertificatesOnError")]
        public virtual void LogDebugMessageWhenCallingFindBySubjectNameContainingUnicodeCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log debug message when calling FindBySubjectName containing unicode characters", new string[] {
                        "CleanupCertificatesOnError"});
#line 49
  this.ScenarioSetup(scenarioInfo);
#line 50
    testRunner.Given("the certificate \'sampleCertificate.pfx\' has been loaded using password \'abc123\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
   testRunner.And("place it into the \'My\' store for the \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
   testRunner.And("a trace listener has been attached to the executing process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("I create a certificate repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
   testRunner.And("set the Store Name to \'My\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
   testRunner.And("set the Store Location to \'CurrentUser\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
   testRunner.And("I call FindBySubjectName with subject name \'Sample\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.Then("a debug message will be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.Then("any certificates should be cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
